{"version":3,"sources":["Components/Dialogs/dialogs.module.css","Components/Dialogs/DialogsMonitor/DialogsMonitor.jsx","Components/Dialogs/UserItem/UserItem.jsx","Components/Dialogs/UserItem/UserItemContainer.jsx","Components/Dialogs/DialogsMessages/DialogsMessages.jsx","Components/Dialogs/Dialogs.jsx","reselect/DialogsReselect.js","Components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","DialogsMonitor","React","memo","props","className","s","titeUserSendingMessage","currentUser","length","userName","dialogsMonitor","messages","map","m","messagesMonitor","ownerMessage","owner","profile","username","message","uuidv4","UserItem","userMessages","onClick","getCurrentUser","user","id","avatar","style","backgroundColor","marginRight","marginTop","size","UserItemContainer","this","Component","DialogsMesagesForm","onSubmit","handleSubmit","createField","Textarea2","block","type","htmlType","error","ReduxDialogsForm","reduxForm","form","DialogsMessages","sendMessage","isAuth","formData","userId","undefined","notification","open","description","Dialogs","dialogs","dialogsUsers","um","dialogsSending","getUserMessagesRs","state","dialogsPage","getCurrentUserRs","getOwnerRs","auth","signIn","DialogsContainer","match","params","getUserMessages","to","PureComponent","compose","withRouter","connect"],"mappings":"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","file":"static/js/9.174ef50b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"dialogs_dialogs__3dfl8\",\"dialogsMonitor\":\"dialogs_dialogsMonitor__3Y_Aq\",\"dialogsSending\":\"dialogs_dialogsSending__LH5ny\",\"dialogsUsers\":\"dialogs_dialogsUsers__1HZKA\",\"userMessages\":\"dialogs_userMessages__WCQYZ\",\"messagesForm\":\"dialogs_messagesForm__3StNU\",\"titeUserSendingMessage\":\"dialogs_titeUserSendingMessage__2DGaz\",\"messagesMonitor\":\"dialogs_messagesMonitor__3K3C5\",\"ownerMessage\":\"dialogs_ownerMessage__jS414\",\"avatar\":\"dialogs_avatar__76oBM\"};","import React from 'react';\r\n\r\nimport s from '../dialogs.module.css'\r\nimport {v4 as uuidv4} from 'uuid';\r\n\r\nconst DialogsMonitor = React.memo((props) => {\r\n    return (<>\r\n        <h1 className={s.titeUserSendingMessage}>{props.currentUser.length > 2 && props.currentUser[1].userName}</h1>\r\n        <div className={s.dialogsMonitor}>\r\n            {\r\n                props.currentUser.length > 2 &&\r\n                props.currentUser[2].messages[0]\r\n                    .map(m => <div className={s.messagesMonitor} key={uuidv4()}>\r\n                        <span className={s.ownerMessage}>{props.owner !== null && props.owner.profile.username} :</span> <br/>\r\n                        <p>{m.message}</p>\r\n                    </div>)\r\n            }\r\n        </div>\r\n    </>)\r\n})\r\n\r\nexport default DialogsMonitor;","import React from 'react';\r\n\r\nimport {Avatar} from \"antd\";\r\nimport s from '../dialogs.module.css'\r\n\r\nconst UserItem = React.memo((props) => {\r\n    const onSendingCurrentUser=()=>{\r\n        props.getCurrentUser(props.user.id,props.user.username)\r\n    }\r\n\r\n    return <div className={s.userMessages} onClick={onSendingCurrentUser}>\r\n                <Avatar\r\n                    className={s.avatar}\r\n                    style={{\r\n                        backgroundColor:'orange',\r\n                        marginRight:\"7px\",\r\n                        marginTop:\"7px\",\r\n                    }}\r\n                    size=\"large\"\r\n                >\r\n                    {props.user.username[0]}\r\n                </Avatar>\r\n                { props.user.username}\r\n            </div>\r\n})\r\n\r\nexport default UserItem;","import React, {Component} from 'react';\r\n\r\nimport UserItem from \"./UserItem\";\r\n\r\nclass UserItemContainer extends Component {\r\n    componentDidMount() {\r\n        this.props.getCurrentUser(this.props.user.id,this.props.user.username)\r\n    }\r\n    render() {\r\n        return <UserItem\r\n                    getCurrentUser={this.props.getCurrentUser}\r\n                    user={this.props.user}\r\n                />\r\n    }\r\n}\r\n\r\nexport default UserItemContainer;","import React from 'react';\r\n\r\nimport {createField, Textarea2} from \"../../common/FormsControls/FormsControls\";\r\nimport {Button, notification} from \"antd\";\r\nimport {reduxForm} from \"redux-form\";\r\n\r\nconst DialogsMesagesForm = React.memo((props) => {\r\n    return (<form onSubmit={props.handleSubmit}>\r\n            {createField(\"your message\", 'message', [], Textarea2)}\r\n                <Button block type={'primary'} htmlType=\"submit\">send</Button>\r\n            {props.error && <div>{props.error}</div>}\r\n        </form>\r\n    );\r\n});\r\n\r\nconst ReduxDialogsForm = reduxForm({form: 'messages'})(DialogsMesagesForm)\r\n\r\nconst DialogsMessages = ({owner,sendMessage,currentUser,isAuth}) => {\r\n    const openNotification = () => {\r\n        notification.open({\r\n            message: '',\r\n            description:\r\n            // 'habaringnizni qabul qiluvchi manzil ma'lum emas. iltimos uni belgilang!',\r\n            // ' The recipient of your message is unknown. please mark it! ',\r\n                'Получатель вашего сообщения неизвестен. пожалуйста отметьте это!',\r\n        });\r\n    };\r\n    const onSubmit = (formData) => {\r\n        let userId =undefined\r\n       if(currentUser.length>0 || userId !== undefined){\r\n            userId=currentUser[0].userId\r\n           sendMessage(userId,formData)\r\n       } else{\r\n            openNotification()\r\n        }\r\n    }\r\n    return (<>\r\n            <ReduxDialogsForm onSubmit={onSubmit} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default DialogsMessages;","import React from 'react';\r\n\r\nimport s from '../Dialogs/dialogs.module.css'\r\nimport DialogsMonitor from \"./DialogsMonitor/DialogsMonitor\";\r\nimport UserItemContainer from \"./UserItem/UserItemContainer\";\r\nimport DialogsMessages from \"./DialogsMessages/DialogsMessages\";\r\n\r\nconst Dialogs = React.memo((props) => {\r\n    return (<div className={s.dialogs}>\r\n            <div className={s.dialogsUsers}>\r\n                {\r\n                    props.userMessages.length !==0 && props.userMessages\r\n                    .map(um => <UserItemContainer\r\n                        key={um.id || 99} user={um} getCurrentUser={props.getCurrentUser}\r\n                    />)\r\n                }\r\n            </div>\r\n            <div className={s.dialogsSending}>\r\n                <DialogsMonitor owner={props.owner} currentUser={props.currentUser}/>\r\n                <DialogsMessages sendMessage={props.sendMessage} currentUser={props.currentUser} />\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default Dialogs;","export const getUserMessagesRs=(state)=>{\r\n    return state.dialogsPage.userMessages\r\n}\r\n\r\nexport const getCurrentUserRs=(state)=>{\r\n    return state.dialogsPage.currentUser\r\n}\r\n\r\nexport const getOwnerRs=(state)=>{\r\n    return state.auth.signIn\r\n}","import React from 'react';\r\n\r\nimport {compose} from \"redux\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withRouter} from \"react-router\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {getCurrentUser, getUserMessages, sendMessage} from \"../../reducers/dialogs-reducer\";\r\nimport {getCurrentUserRs, getOwnerRs, getUserMessagesRs} from \"../../reselect/DialogsReselect\";\r\n\r\nclass DialogsContainer extends React.PureComponent {\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n        this.props.getUserMessages(userId)\r\n    }\r\n    render() {\r\n        if(this.props.owner === null){return <Redirect to={'/signin'}/>}\r\n        return <Dialogs\r\n            getCurrentUser={this.props.getCurrentUser}\r\n            userMessages={this.props.userMessages}\r\n            currentUser={this.props.currentUser}\r\n            sendMessage={this.props.sendMessage}\r\n            owner={this.props.owner}\r\n        />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    userMessages: getUserMessagesRs(state),\r\n    currentUser: getCurrentUserRs(state),\r\n    owner:getOwnerRs(state)\r\n})\r\n\r\nexport default compose(\r\n    withRouter,\r\n    connect(mapStateToProps, {getUserMessages,getCurrentUser,sendMessage})\r\n)(DialogsContainer);"],"sourceRoot":""}